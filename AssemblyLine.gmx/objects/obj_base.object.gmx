<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_base2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next = -1

depth = y
value = 500;
part1 = false;
part2 = false;
part3 = false;
justCreated = false;
spr1 = spr_part1v1;
spr2 = spr_part2v1;
spr3 = spr_part3v1;
isBase = false;

//Daniel's Code - To add a new part just add a new thing to the array
randomize();

//Base
base[0] = spr_base;
base[1] = spr_base2;
base[2] = spr_base3;
//base[1] = spr_base2;
//Arms
arms[0] = spr_arms;
arms[1] = spr_arms3;
arms[2] = spr_arms2;

//Chassis
//chassis[0] = spr_chassis;
//chassis[1] = spr_chassis2;

//Head
head[0] = spr_head;
head[1] = spr_head2;
head[2] = spr_head3;

//Choose how many parts
sprite_index = base[irandom(array_length_1d(base)-1)];
/*  No Longer Needed
required_parts = irandom(2) + 1;
if(required_parts == 1)
{
    part_spr[0] = head[irandom(array_length_1d(head)-1)];
}

if(required_parts == 2)
{
    part_spr[1] = head[irandom(array_length_1d(head)-1)];
    part_spr[0] = arms[irandom(array_length_1d(arms)-1)];
}

if(required_parts == 3)
{
    part_spr[2] = head[irandom(array_length_1d(head)-1)];
    part_spr[1] = arms[irandom(array_length_1d(arms)-1)];
    part_spr[0] = chassis[irandom(array_length_1d(chassis)-1)];
} */
required_parts = 2;
part_spr[0] = arms[irandom(array_length_1d(arms)-1)];
part_spr[1] = head[irandom(array_length_1d(head)-1)];


//END DANIEL CODE
parts = 0
partnum = 0
/*
rand = round(random(10))

if rand&lt;2
{
required_parts = 3
part_spr[0] = spr_chassis
part_spr[1] = spr_arms
part_spr[2] = spr_head
}
else if rand&lt;5
{
required_parts = 2
part_spr[0] = spr_arms
part_spr[1] = spr_head
}
else if rand&lt;8
{
required_parts = 1
part_spr[0] = spr_head
}
else if rand&lt;9
{
required_parts = 2
part_spr[0] = spr_arms2
part_spr[1] = spr_head
}
else
{
required_parts = 3
part_spr[0] = spr_chassis2
part_spr[1] = spr_arms2
part_spr[2] = spr_head
}
 */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if x&gt;room_width + 64
if isBase
    {
    //score += value;
    //if(part1 &amp;&amp; part2 &amp;&amp; part3)
    
    correct_combo = true
    
    if parts != required_parts
        {
        correct_combo = false
        }

    if correct_combo
    for(i=0 ; i &lt; parts ; i++)
        {
        if part[i].sprite_index != part_spr[i]
            correct_combo = false
        }
    
    if correct_combo
        {
        global.multiplier += .1;
        score += value*global.multiplier;
        switch(round(random(5)))
            {
            case 0: word = "Perfect" break;
            case 1: word = "Flawless" break;
            case 2: word = "Excellent" break;
            case 3: word = "Good Job" break;
            case 4: word = "Nice" break;
            case 5: word = "Good" break;
            }
        info(x,y,word+"!#+"+string(value*global.multiplier)+" points",c_lime)
        }
    else if(!justCreated)
        {
        lives -= 1;
        global.multiplier = 1;
        global.trbs--;
        obj_base.hspeed= 1;
        obj_creator.h_value -= 1//= obj_creator.hstart * 2;
        obj_creator.alarm[0] = 200;
        info(x,y,"Defective Product!",c_red)
        }
    instance_destroy()
    }
hspeed = obj_creator.h_value;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,0, x, y)
draw_set_color(c_white)
if isBase
    {
    //draw_text(x+64,y,"Base with "+string(parts)+" parts#ID: "+string(id))
    for(i=parts ; i&lt;required_parts ; i++)
        {
        draw_sprite_ext(part_spr[i],0, x, y-sprite_height*2/4*(i+1),1,1,0,c_white,.2)
        }
    }
else
    {
    //if instance_exists(base)
    //draw_text(x+64,y,"Part "+string(partnum)+"#Base: "+string(base.id))
    }

/*
draw_sprite(spr1,0, x, y-8);

draw_sprite(spr2,0, x, y-16);
draw_sprite(spr3,0, x, y-24);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
